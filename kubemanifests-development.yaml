apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: mda
      name: mda
    spec:
      type: NodePort
      ports:
        - name: "4000"
          port: 4000
          targetPort: 4000
          nodePort: 30036
      selector:
        io.kompose.service: mda
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
      name: postgres
    spec:
      type: NodePort
      ports:
        - name: "5432"
          port: 5432
          targetPort: 5432
      selector:
        io.kompose.service: postgres
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: osm
      name: osm
    spec:
      type: NodePort
      ports:
        - name: "4500"
          port: 4500
          targetPort: 4500
          nodePort: 30037
      selector:
        io.kompose.service: osm
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: mda
      name: mda
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: mda
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: mda
        spec:
          containers:
            - name: mda
              image: docker.pkg.github.com/5gzorro/mda/mda_production:latest
              envFrom:
              - secretRef:
                  name: env-file
              ports:
                - containerPort: 4000
              resources: {}
              volumeMounts:
                - mountPath: /logs
                  name: mda-claim0
          imagePullSecrets:
            - name: regcred
          restartPolicy: Always
          volumes:
            - name: mda-claim0
              persistentVolumeClaim:
                claimName: mda-claim0
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
      name: postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: postgres
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: postgres
        spec:
          containers:
            - name: mda-bd
              envFrom:
              - secretRef:
                  name: env-file
              image: postgres
              ports:
                - containerPort: 5432
              resources: {}
              volumeMounts:
                - mountPath: /mnt/postgres
                  name: mda-postgres-claim0
          restartPolicy: Always
          volumes:
            - name: mda-postgres-claim0
              persistentVolumeClaim:
                claimName: mda-postgres-claim0
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: osm
      name: osm
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: osm
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose-development.yml -o kubemanifests-development.yaml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: osm
        spec:
          containers:
            - name: osm
              envFrom:
              - secretRef:
                  name: env-file
              image: docker.pkg.github.com/5gzorro/mda/osm_dummy:latest
              ports:
                - containerPort: 4500
              resources: {}
          imagePullSecrets:
            - name: regcred
          restartPolicy: Always
    status: {}

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: mda-postgres-claim0
      name: mda-postgres-claim0
    spec:
      storageClassName: postgresvolume
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: mda-claim0
      name: mda-claim0
    spec:
      storageClassName: mdavolume
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}

  # persistent volume
  # postgres
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: mda-postgres-pv-volume
      labels:
        type: local
    spec:
      storageClassName: postgresvolume
      capacity:
        storage: 100Mi
      accessModes:
        - ReadWriteOnce
      hostPath:
        path: "/mnt/data"

  # mda
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: mda-pv-volume
      labels:
        type: local
    spec:
      storageClassName: mdavolume
      capacity:
        storage: 100Mi
      accessModes:
        - ReadWriteOnce
      hostPath:
        path: "/mnt/data"
kind: List
metadata: {}
